#!/usr/bin/env bash

set -euo pipefail
VERSION="1.0"

# ---------------------------- defaults ----------------------------
spread=3.0  freq=0.1  seed=0
animation_style=none        # none | classic | line
duration=1  speed=5.0
invert=false want_truecolor=false force=false
build_box=false   box_style="default"     # default|parchment|simple|html|shell|diamond
orientation="h"                           # h|v|d
palette_file=""   theme="rainbow"
ascii_image="" blink=false

# --------------------------- helpers ------------------------------
require() { command -v "$1" >/dev/null 2>&1 || { printf 'Error: %s required\n' "$1" >&2; exit 1; }; }

usage() {
  cat <<EOF
chromacat $VERSION – colourful text printer

USAGE
  $(basename "$0") [OPTIONS] [FILE]...

COLOUR / ANIMATION
  -p, --spread <f>         Rainbow spread (default $spread)
  -F, --freq   <f>         Rainbow frequency (default $freq)
  -S, --seed   <n>         Seed (0=random)
  -a, --animate            Classic scrolling animation
  -aa,--line               Line‑by‑line reveal animation
      --style <name>       Animation style (classic|line|none)
  -d, --duration <sec>     Animation seconds (default $duration)
  -s, --speed <fps>        Frames / second (default $speed)

APPEARANCE
  -i, --invert             Invert foreground / background
  -t, --truecolor          Force 24‑bit colour
  -f, --force              Colour even if stdout not a TTY
  -b, --box                Draw ASCII box
  -B, --box-style <name>   Box style: default|dashed|dash2|round|double|heavy|round|parchment|simple|shell|html|plus|comment|php|chain
  -O, --orientation <o>    Gradient orientation: h|v|d
  -P, --palette <file>     Palette file (HEX per line)
  -T, --theme <name>       fire|ice|sunset|ocean|rainbow
  -I, --image <file>       ASCII‑art mode via img2txt
  --blink                  Blinking text

MISC
  -v, --version            Print version and exit
  -h, --help               Show this help

EXAMPLES
  echo "hello" | chromacat -a -d 2
  figlet "Docker" | chromacat -b -B parchment -aa -d 6 -O d
EOF
}

# ------------------------- option parsing -------------------------
require getopt
OPTS=$(getopt -o p:F:S:ad:s:itfbB:O:P:T:I:vh \
 --long spread:,freq:,seed:,animate,style:,line,duration:,speed:,invert,truecolor,force,box,box-style:,orientation:,palette:,theme:,image:,version,help -- "$@") \
 || { usage; exit 1; }

eval set -- "$OPTS"
while true; do
  case $1 in
    -p|--spread)       spread=$2; shift 2;;
    -F|--freq)         freq=$2; shift 2;;
    -S|--seed)         seed=$2; shift 2;;
    -a|--animate)      animation_style=classic; shift;;
    --style)           animation_style=$2; shift 2;;
    -aa|--line)        animation_style=line; shift;;
    -d|--duration)     duration=$2; shift 2;;
    -s|--speed)        speed=$2; shift 2;;
    -i|--invert)       invert=true; shift;;
    -t|--truecolor)    want_truecolor=true; shift;;
    -f|--force)        force=true; shift;;
    -b|--box)          build_box=true; shift;;
    -B|--box-style)    build_box=true; box_style=$2; shift 2;;
    -O|--orientation)  orientation=$2; shift 2;;
    -P|--palette)      palette_file=$2; shift 2;;
    --blink) blink=true; shift;;
    -T|--theme)
      IFS=',' read -ra THEMES <<< "$2"
      shift 2
      ;;
    -I|--image)        ascii_image=$2; shift 2;;
    -v|--version)      printf '%s %s\n' "$(basename "$0")" "$VERSION"; exit 0;;
    -h|--help)         usage; exit 0;;
    --) shift; break;;
  esac
done
files=("$@")

# -------------- environment / sanity checks -----------------------
truecolor=false
[[ $want_truecolor == true && ${COLORTERM:-} == *truecolor* ]] && truecolor=true

if [[ ! -t 1 && $force == false ]]; then
  animation_style=none
  build_box=false
  truecolor=false
fi

for v in spread freq duration speed; do
  [[ ${!v} =~ ^[0-9]+(\.[0-9]+)?$ ]] || { echo "Invalid $v" >&2; exit 1; }
done

# --------------------------- palette ------------------------------
PALETTE=""
if [[ -n $palette_file ]]; then
  mapfile -t _pal < "$palette_file" || { echo "Bad palette file" >&2; exit 1; }
  PALETTE=$(IFS=,; echo "${_pal[*]}")
else
  if [[ ${#THEMES[@]:-} -gt 0 ]]; then
    for theme in "${THEMES[@]}"; do
      case $theme in
        fire)    PALETTE+=",FF6B00,FF8C00,FFA500,FFD700";;
        ice)     PALETTE+=",00FFFF,00CED1,1E90FF,4169E1";;
        sunset)  PALETTE+=",FF4500,FF6347,FF7F50,FF8C00,FFD700";;
        ocean)   PALETTE+=",006994,008CBA,00AEEF,33CCFF";;
        rainbow) PALETTE+=",FF0000,FF7F00,FFFF00,00FF00,0000FF,4B0082,8B00FF";;
        *) echo "Unknown theme: $theme" >&2 ;;
      esac
    done
    PALETTE="${PALETTE#,}"  # Trim leading comma
  fi
fi

get_seed() { (( seed > 0 )) && echo "$seed" || echo "$RANDOM"; }

# map full words → one‑char orientation
case $orientation in
  horizontal) orientation="h";;
  vertical)   orientation="v";;
  diagonal)   orientation="d";;
esac

# ---------------------- colouriser (portable AWK) -----------------
colour_block() {
  awk -v spread="$spread" -v blink="$blink" -v freq="$freq" -v seed="$(get_seed)" \
      -v tc="$truecolor" -v palette="$PALETTE" -v orient="$orientation" \
      -v invert="$invert" '
  BEGIN {
    pi=3.1415926536;
    if(palette!="") pc=split(palette,p,",");
  }
  function rgb(r,g,b){
    return (tc=="true")?
      sprintf("38;2;%d;%d;%d",r,g,b):
      sprintf("38;5;%d",16+int(r*6/256)*36+int(g*6/256)*6+int(b*6/256))
  }
  function blink_on() { return "\033[5m" }
  function blink_off() { return "\033[25m" }
  function pal(i){ return p[(i%pc)+1] }
  function hex2dec(h,   n,v,i,d) {
    n = length(h);
    v = 0;
    for(i=1;i<=n;i++) {
      d = substr(h,i,1);
      v = v * 16 + index("0123456789abcdef", tolower(d)) - 1;
    }
    return v;
  }
  function rainbow(i,r,g,b,col){
    if(pc){
      col=pal(i)
    }else{
      r=sin(freq*i)*127+128;
      g=sin(freq*i+2*pi/3)*127+128;
      b=sin(freq*i+4*pi/3)*127+128;
      col=sprintf("%02X%02X%02X",r,g,b)
    }
    return col
  }
  {
    for(j=1;j<=length($0);j++){
      c=substr($0,j,1)
      if(orient=="v") idx=NR; else if(orient=="d") idx=NR+j/spread; else idx=j+NR/spread
      idx+=seed
      col=rainbow(int(idx))
      r=hex2dec(substr(col,1,2)); g=hex2dec(substr(col,3,2)); b=hex2dec(substr(col,5,2));
      code=rgb(r,g,b)
      if(invert=="true") printf "\033[7m"
      if(blink=="true") printf "%s", blink_on()
      printf "\033[%sm%s", code, c
      if(blink=="true") printf "%s", blink_off()
      if(invert=="true") printf "\033[27m"
    }
    printf "\033[0m\n"
  }'
}


# --------------------------- box drawer ---------------------------
box_draw() {
  local style=$box_style
  mapfile -t LINES

  # ── calculate longest visible line ──────────────────────────────
  local max=0 line
  for line in "${LINES[@]}"; do
    (( ${#line} > max )) && max=${#line}
  done

  # ── helpers ─────────────────────────────────────────────────────
  hr() { printf '%*s' "$1" | tr ' ' "$2"; }

  case $style in
  # ---------------------------------------------------------------- default  (+‑‑‑)
  default)
    local tl='+' tr='+' bl='+' br='+' h='-' v='|'
    printf '%s' "$tl"; hr $((max+2)) "$h"; printf '%s\n' "$tr"
    for line in "${LINES[@]}"; do printf '%s %-*s %s\n' "$v" "$max" "$line" "$v"; done
    printf '%s' "$bl"; hr $((max+2)) "$h"; printf '%s\n' "$br"
    ;;

  # ---------------------------------------------------------------- dashed  (- - -)
  dashed)
    local tl='+' tr='+' bl='+' br='+' v='|'
    local dash_line=""
    for ((i=0;i<max+2;i++)); do dash_line+=$([[ $((i%2)) == 0 ]] && echo '-' || echo ' '); done
    printf '%s%s%s\n' "$tl" "$dash_line" "$tr"
    for line in "${LINES[@]}"; do printf '%s %-*s %s\n' "$v" "$max" "$line" "$v"; done
    printf '%s%s%s\n' "$bl" "$dash_line" "$br"
    ;;

  # ---------------------------------------------------------------- dash2
  dash2)
    local border
    border=$(hr $((max+6)) '-')
    printf '%s\n' "$border"
    for line in "${LINES[@]}"; do
      printf -- "-- %-*s --\n" "$max" "$line"
    done
    printf '%s\n' "$border"
    ;;

  # ---------------------------------------------------------------- double  (+===)
  double)
    local tl='+' tr='+' bl='+' br='+' h='=' v='|'
    printf '%s' "$tl"; hr $((max+2)) "$h"; printf '%s\n' "$tr"
    for line in "${LINES[@]}"; do printf '%s %-*s %s\n' "$v" "$max" "$line" "$v"; done
    printf '%s' "$bl"; hr $((max+2)) "$h"; printf '%s\n' "$br"
    ;;

  # ---------------------------------------------------------------- heavy  (#)
  heavy)
    local tl='#' tr='#' bl='#' br='#' h='#' v='#'
    printf '%s' "$tl"; hr $((max+2)) "$h"; printf '%s\n' "$tr"
    for line in "${LINES[@]}"; do printf '%s %-*s %s\n' "$v" "$max" "$line" "$v"; done
    printf '%s' "$bl"; hr $((max+2)) "$h"; printf '%s\n' "$br"
    ;;

  # ---------------------------------------------------------------- round  (() )
  round)
    local tl='(' tr=')' bl='(' br=')'
    printf '%s' "$tl"; hr $((max+2)) "-"; printf '%s\n' "$tr"
    for line in "${LINES[@]}"; do printf '%s %-*s %s\n' "(" "$max" "$line" ")"; done
    printf '%s' "$bl"; hr $((max+2)) "-"; printf '%s\n' "$br"
    ;;

  # ---------------------------------------------------------------- parchment (unchanged ASCII)
  parchment)
    local head_len=$((max + 4))
    printf ' %s\n' "$(hr "$head_len" '_')"
    printf '/\\ %*s\\\n' $((max + 2)) ""
    printf '\\_| %-*s |\n' "$max" "${LINES[0]:-}"
    for ((i = 1; i < ${#LINES[@]}; i++)); do
      printf '  | %-*s |\n' "$max" "${LINES[i]}"
    done
    local u1=$((max - 2)); ((u1<1)) && u1=1
    printf '  |   %s_|_.\n' "$(hr "$u1" '_')"
    printf '   \\_/%s/\n' "$(hr "$max" '_')"
    ;;

  # ---------------------------------------------------------------- simple  (*)
  simple)
    hr $((max+4)) '*'; printf '\n'
    for line in "${LINES[@]}"; do printf '* %-*s *\n' "$max" "$line"; done
    hr $((max+4)) '*'; printf '\n'
    ;;

  # ---------------------------------------------------------------- shell (#)
  shell)
    hr $((max+4)) '#'; printf '\n'
    for line in "${LINES[@]}"; do printf '# %-*s #\n' "$max" "$line"; done
    hr $((max+4)) '#'; printf '\n'
    ;;

  # ---------------------------------------------------------------- html
  html)
    local border="<!-- $(hr "$max" '-') -->"
    printf '%s\n' "$border"
    for line in "${LINES[@]}"; do printf '<!-- %-*s -->\n' "$max" "$line"; done
    printf '%s\n' "$border"
    ;;

  # ---------------------------------------------------------------- comment /* */
  comment)
    printf '/* %s */\n' "$(hr "$max" '*')"
    for line in "${LINES[@]}"; do printf ' * %-*s *\n' "$max" "$line"; done
    printf '/* %s */\n' "$(hr "$max" '*')"
    ;;

  # ---------------------------------------------------------------- php  <? ---- ?>
  php)
    printf '<?%s?>\n' "$(hr "$max" '-')"
    for line in "${LINES[@]}"; do printf '| %-*s |\n' "$max" "$line"; done
    printf '<?%s?>\n' "$(hr "$max" '-')"
    ;;

  # ---------------------------------------------------------------- plus (legacy ASCII single‑line)
  plus)
    local tl='+' tr='+' bl='+' br='+' h='-' v='|'
    printf '%s' "$tl"; hr $((max+2)) "$h"; printf '%s\n' "$tr"
    for line in "${LINES[@]}"; do printf '%s %-*s %s\n' "$v" "$max" "$line" "$v"; done
    printf '%s' "$bl"; hr $((max+2)) "$h"; printf '%s\n' "$br"
    ;;

  # ---------------------------------------------------------------- chain  (/\/\/\ … \/)
  chain)
    local border=""
    local target_len=$((max + 6))
    while (( ${#border} < target_len )); do
      border+='<>'
    done
    border=${border:0:target_len}
    printf '%s\n' "${border}"
    for line in "${LINES[@]}"; do
      printf '<> %-*s <>\n' "$max" "${line}"
    done
    printf '%s\n' "${border}"
    ;;

  # ---------------------------------------------------------------- unknown
  *)
    echo "Unknown box style: $style" >&2
    exit 1
    ;;
  esac
}

# ----------------------- animation helpers ------------------------
frames()  { awk -v d="$duration" -v s="$speed" 'BEGIN{printf "%d", d*s}'; }
sleeper() { awk -v s="$speed"            'BEGIN{printf "%.5f", 1/s}'; }

animate_classic() {
  tput civis; trap 'tput cnorm; exit' INT TERM
  mapfile -t L
  local n=${#L[@]} tot
  tot=$(frames); local sl; sl=$(sleeper)
  for ((f=0; f<tot; f++)); do
    printf '%s\n' "${L[@]}" | colour_block
    printf '\033[%dA' "$n"
    sleep "$sl"
  done
  printf '\033[%dB' "$n"; tput cnorm
}

animate_line() {
  tput civis; trap 'tput cnorm; exit' INT TERM
  mapfile -t L; local n=${#L[@]}
  local sl; if (( duration > 0 )); then
    sl=$(awk -v d="$duration" -v n="$n" 'BEGIN{printf "%.5f", d/n}')
  else sl=$(sleeper); fi
  for ((i=0; i<n; i++)); do
    printf '%s\n' "${L[i]}" | colour_block
    sleep "$sl"
  done
  tput cnorm
}

# --------------------- ASCII‑image import -------------------------
if [[ -n $ascii_image ]]; then
  require img2txt
  ascii_payload=$(img2txt --width="${COLUMNS:-80}" --color < "$ascii_image" \
                 | sed $'s/\e\[[0-9;]*[A-Za-z]//g')
  files=("-")
fi
[[ ${#files[@]} -eq 0 ]] && files=("-")

# ---------------------------- main loop ---------------------------
for f in "${files[@]}"; do
  # read input
  if [[ $f == "-" ]]; then
    input=${ascii_payload:-$(cat)}
  else
    input=$(cat "$f")
  fi

  # optional box
  $build_box && input=$(printf '%s\n' "$input" | box_draw)

  # render
  case $animation_style in
    classic) printf '%s\n' "$input" | animate_classic ;;
    line)    printf '%s\n' "$input" | animate_line ;;
    *)       printf '%s\n' "$input" | colour_block ;;
  esac
done
