#!/bin/bash

# Helper function for displaying usage
usage() {
  echo "Usage: gitx <command> [options]"
  echo ""
  echo "üìÇ Repository & Branch Management:"
  echo "  status                                           Show repository status, branch tracking, and remote info"
  echo "  fetch                                            Fetch remote branches and prune stale references"
  echo "  sync                                             Sync alpha and develop with master/main"
  echo "  create <branch_type> <name>                      Create a new branch from master/main"
  echo "      - branch_type: feature, bugfix, hotfix, release, docs, ci, experiment"
  echo "      - name: A short descriptive name for the branch"
  echo "  merge <source_branch> <target_branch>           Merge one branch into another"
  echo "      - source_branch: The branch to merge from"
  echo "      - target_branch: The branch to merge into"
  echo "  reset-branch                                     Reset current branch to remote state"
  echo "      - Interactive mode with soft/hard reset options"
  echo "  prune                                            Prune remote branches and delete local tracking branches"
  echo "  cleanup                                          Delete merged branches"
  echo "      - Prompts to confirm deletion"
  echo "  compare <branch1> <branch2>                      Compare two branches"
  echo "      - branch1: The first branch to compare"
  echo "      - branch2: The second branch to compare"
  echo ""
  echo "üì¶ Commit & Change Management:"
  echo "  commit                                           Interactive commit helper"
  echo "      - Allows selecting files and entering a commit message"
  echo "  amend                                            Amend the last commit message"
  echo "      - Optionally enter a new commit message or edit interactively"
  echo "  cherry-pick <commit_hash>                        Cherry-pick specific commits"
  echo "      - commit_hash: The commit hash to cherry-pick"
  echo "  revert                                           Revert specific commits with options"
  echo "      - Interactive mode to select commits"
  echo "  unstage                                          Unstage all files"
  echo "      - Requires confirmation before unstaging"
  echo "  stage-deleted                                    Stage all deleted files"
  echo "  stage-deleted-dir <directory>                    Stage deleted files in a specific directory"
  echo "      - directory: Path to the directory"
  echo "  diff [output_file]                               View or save staged changes"
  echo "      - output_file: Save diff to a file (optional)"
  echo ""
  echo "üîç Tracking & Reporting:"
  echo "  log-file <file_path>                             View commit history and diffs for a specific file"
  echo "      - file_path: Path to the file to inspect"
  echo "  commit-report <start_commit..end_commit>       Generate a commit report"
  echo "      - start_commit: The starting commit hash or tag"
  echo "      - end_commit: The ending commit hash or tag (default: HEAD)"
  echo "  commit-report <start_date> <end_date>       Generate a commit report"
  echo "      - start_date: Start date in YYYY-MM-DD format"
  echo "      - end_date: End date in YYYY-MM-DD format"
  echo "  summary [commit_range] [include-all]            Summarize commits, files, insertions, deletions, surviving code"
  echo "      - commit_range: Optional, e.g., HEAD~50"
  echo "      - include-all: Optional, include all text-based files"
  echo "  report <start_commit> [end_commit] [file]       Generate PR and commit report"
  echo "      - start_commit: The starting commit hash or tag"
  echo "      - end_commit: The ending commit hash or tag (default: HEAD)"
  echo "      - file: Output file for the report (optional)"
  echo "  count-changes                                    Count changes (insertions, deletions) between two commits"
  echo "  list-changes <branch1> <branch2>                 List files changed between two branches"
  echo "      - branch1: The first branch"
  echo "      - branch2: The second branch"
  echo "  changelog <start_commit> <end_commit>           Generate a changelog between commits or tags"
  echo "      - start_commit: The starting commit hash or tag"
  echo "      - end_commit: The ending commit hash or tag"
  echo ""
  echo "üîñ Tags & Releases:"
  echo "  tag <version>                                    Tag the current branch with a version (e.g., v1.0.0)"
  echo "      - version: Must follow semantic versioning (vX.Y.Z)"
  echo "  latest-tag                                       Get the latest tag in the repository"
  echo "  initial-commit                                   Get the initial commit hash"
  echo ""
  echo "üóÑÔ∏è Stashing & Cleanup:"
  echo "  stash                                            Manage stash operations (save, list, apply, drop, rename, clear)"
  echo "  clean                                            Clean untracked files and directories"
  echo "      - Interactive mode with preview option"
  echo "  large-files                                      Show the largest files in the repository"
  echo "      - Prompts for the number of files to display"
  echo ""
  echo "‚öôÔ∏è Configuration & Utilities:"
  echo "  add-remote <name> <url>                         Add a new remote repository"
  echo "      - name: Remote name (e.g., origin)"
  echo "      - url: Remote URL"
  echo "  push-remote <remote> <branch>                   Push to a specific remote branch"
  echo "      - remote: Remote name (e.g., origin)"
  echo "      - branch: Branch to push"
  echo "  pull-remote <remote> <branch>                   Pull from a specific remote branch"
  echo "      - remote: Remote name (e.g., origin)"
  echo "      - branch: Branch to pull"
  echo "  config                                           Edit Git configuration (add/edit/remove keys)"
  echo "  set-lf                                           Set Git to use LF line endings"
  echo "  self-update                                      Update gitx to the latest version"
  echo ""
  echo "üîπ Example Usages:"
  echo "  gitx commit                                      # Interactive commit helper"
  echo "  gitx report v1.0.0 v2.0.0                        # Generate PR and commit report"
  echo "  gitx reset-branch                                # Reset current branch to match remote"
  echo "  gitx compare develop main                        # Compare two branches"
  echo "  gitx summary HEAD~50 include-all                # Summarize commits with surviving code percentage"
  echo ""
  exit 1
}
require_sudo() {
  # Ensures the script is run with root privileges (either as root or via sudo).
  # If not, we exit with code 1 and log the error.
  if [[ "$EUID" -ne 0 ]]; then
    echo -e "${RED}Please run this script with sudo or as root.${NC}"
    log_action "ERROR" "Script not run with sudo (EUID=$EUID)."
    exit 1
  fi
}

# Ensure Git repository
ensure_git_repo() {
  if ! git rev-parse --is-inside-work-tree &>/dev/null; then
    echo "Error: Not inside a Git repository."
    exit 1
  fi
}

# Unstage all files
unstage_all() {
  ensure_git_repo
  echo "WARNING: This will unstage all files!"
  read -rp "Are you sure? (y/n): " confirm
  [[ "$confirm" != "y" ]] && { echo "Operation cancelled."; return; }
  git reset --staged .
  echo "All files have been unstaged."
}


# Amend the last commit message
amend_commit_message() {
  ensure_git_repo
  read -rp "Enter the new commit message (leave blank to edit interactively): " new_message
  if [[ -z "$new_message" ]]; then
    git commit --amend
  else
    git commit --amend -m "$new_message"
  fi
  echo "Commit message amended."
}


# Add a new remote repository
add_remote() {
  ensure_git_repo
  read -rp "Enter the remote name (e.g., origin): " remote_name
  read -rp "Enter the remote URL: " remote_url

  if [[ -z "$remote_name" || -z "$remote_url" ]]; then
    echo "Error: Remote name and URL are required."
    return 1
  fi

  git remote add "$remote_name" "$remote_url" && echo "Remote '$remote_name' added."
}

# Push to a specific remote branch
push_to_remote() {
  ensure_git_repo
  read -rp "Enter the remote name (default: origin): " remote_name
  read -rp "Enter the branch name to push: " branch_name

  remote_name=${remote_name:-origin}

  if ! git rev-parse --verify "$branch_name" >/dev/null 2>&1; then
    echo "Error: Branch '$branch_name' does not exist."
    return 1
  fi

  git push "$remote_name" "$branch_name"
  echo "Pushed branch '$branch_name' to remote '$remote_name'."
}


# Pull from a specific remote branch
pull_from_remote() {
  ensure_git_repo
  read -rp "Enter the remote name (default: origin): " remote_name
  read -rp "Enter the branch name to pull: " branch_name

  remote_name=${remote_name:-origin}

  if ! git remote | grep -qw "$remote_name"; then
    echo "Error: Remote '$remote_name' does not exist."
    return 1
  fi

  git pull "$remote_name" "$branch_name"
  echo "Pulled branch '$branch_name' from remote '$remote_name'."
}


# Stage all deleted files
stage_deleted_files() {
  ensure_git_repo
  deleted_files=$(git ls-files --deleted)

  if [[ -z "$deleted_files" ]]; then
    echo "No deleted files to stage."
    return 0
  fi

  git ls-files --deleted | xargs git add
  echo "Deleted files have been staged."
}

# Stage deleted files in a specific directory
stage_deleted_in_directory() {
  ensure_git_repo
  read -rp "Enter the directory path: " dir_path

  if [[ ! -d "$dir_path" ]]; then
    echo "Error: Directory '$dir_path' does not exist."
    return 1
  fi

  deleted_files=$(git ls-files --deleted "$dir_path")

  if [[ -z "$deleted_files" ]]; then
    echo "No deleted files to stage in '$dir_path'."
    return 0
  fi

  git add $deleted_files
  echo "Deleted files in '$dir_path' have been staged."
}


# Get the initial commit hash
get_initial_commit() {
  ensure_git_repo
  initial_commit=$(git rev-list --max-parents=0 HEAD 2>/dev/null)
  
  if [[ -z "$initial_commit" ]]; then
    echo "Error: No commits found in this repository."
    return 1
  fi

  echo "Initial Commit: $initial_commit"
}

# Get the latest tag in the repository
get_latest_tag() {
  ensure_git_repo
  latest_tag=$(git describe --tags --abbrev=0 2>/dev/null)

  if [[ -z "$latest_tag" ]]; then
    echo "No tags found in this repository."
    return 1
  fi

  echo "Latest Tag: $latest_tag"
}

# Generate a changelog between two commits or tags
generate_changelog() {
  ensure_git_repo
  read -rp "Enter the start commit or tag: " start_ref
  read -rp "Enter the end commit or tag (default: HEAD): " end_ref
  end_ref=${end_ref:-HEAD}
  changelog_file="changelog_${start_ref}_to_${end_ref}.txt"
  git log "$start_ref..$end_ref" --pretty=format:"%h - %s (%an, %ad)" --date=short >"$changelog_file"
  echo "Changelog saved to $changelog_file."
}

# Count changes between two commits
count_changes_between_commits() {
  ensure_git_repo
  read -rp "Enter the start commit: " start_commit
  read -rp "Enter the end commit (default: HEAD): " end_commit
  end_commit=${end_commit:-HEAD}
  changes_count=$(git diff --shortstat "$start_commit" "$end_commit" | awk '{print $1, $2, $3}')
  echo "Changes between $start_commit and $end_commit: $changes_count"
}

# List files changed between two branches
list_changed_files_between_branches() {
  ensure_git_repo
  read -rp "Enter the first branch: " branch1
  read -rp "Enter the second branch: " branch2
  echo "Files changed between $branch1 and $branch2:"
  git diff --name-only "$branch1" "$branch2"
}

# Set Git to use LF line endings
set_line_endings_to_lf() {
  ensure_git_repo
  git config --global core.autocrlf false
  echo "Configured Git to use LF line endings."
}

# Detect master/main branch
detect_main_branch() {
  if git symbolic-ref refs/remotes/origin/HEAD &>/dev/null; then
    git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
  elif git branch -r | grep -q "origin/main"; then
    echo "main"
  elif git branch -r | grep -q "origin/trunk"; then
    echo "trunk"
  else
    echo "master"
  fi
}

# Create a new branch from master/main
create_branch() {
  local branch_type=$1
  local name=$2
  ensure_git_repo

  # Validate input
  if [[ -z "$branch_type" || -z "$name" ]]; then
    echo "Error: Branch type and name are required."
    return 1
  fi

  local branch_name="${branch_type}/${name}"

  # Check if branch already exists
  if git show-ref --verify --quiet "refs/heads/$branch_name"; then
    echo "Error: Branch '$branch_name' already exists."
    return 1
  fi

  # Detect main branch (optimized)
  local main_branch=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@' || echo "master")

  if [[ $(git rev-parse --abbrev-ref HEAD) != "$main_branch" ]]; then
    echo "Switching to main branch ($main_branch) and pulling latest changes..."
    git checkout "$main_branch" && git pull origin "$main_branch"
  fi

  git checkout -b "$branch_name" || exit
  git push origin "$branch_name"
  echo "Branch created: $branch_name"
}


# Sync alpha and develop with master/main
sync_branches() {
  ensure_git_repo
  local main_branch=$(detect_main_branch)

  echo "Syncing branches with $main_branch..."

  local branches=("alpha" "develop")
  read -rp "Do you want to sync additional branches? (y/n): " sync_more
  if [[ "$sync_more" == "y" ]]; then
    read -rp "Enter branches to sync (comma-separated): " additional_branches
    IFS=',' read -r -a user_branches <<<"$additional_branches"
    branches+=("${user_branches[@]}")
  fi

  # Fetch main branch once to avoid repeated fetches
  git checkout "$main_branch" && git pull origin "$main_branch"

  for branch in "${branches[@]}"; do
    if git show-ref --verify --quiet "refs/heads/$branch"; then
      echo "Merging $main_branch into $branch..."
      git checkout "$branch" && git merge --no-ff "$main_branch" && git push origin "$branch"
      echo "Synced $branch with $main_branch."
    else
      echo "Branch '$branch' does not exist. Skipping..."
    fi
  done
}


# Merge branches
merge_branch() {
  local source=$1
  local target=$2
  ensure_git_repo

  if [[ -z "$source" || -z "$target" ]]; then
    echo "Error: Source and target branches are required."
    return 1
  fi

  if ! git show-ref --verify --quiet "refs/heads/$source" || ! git show-ref --verify --quiet "refs/heads/$target"; then
    echo "Error: One or both branches do not exist."
    return 1
  fi

  echo "About to merge '$source' into '$target'."
  read -rp "Are you sure? (y/n): " confirm
  [[ "$confirm" != "y" ]] && { echo "Merge cancelled."; return; }

  git checkout "$target" && git pull origin "$target"

  echo "Merging $source into $target..."
  if ! git merge --no-ff "$source"; then
    echo "Merge conflicts detected. Resolve them and commit manually."
    echo "Run 'git merge --abort' to cancel the merge."
    return 1
  fi

  git push origin "$target"
  echo "Successfully merged $source into $target."
}


# Tag a release
tag_release() {
  local version=$1
  ensure_git_repo

  if [[ -z "$version" ]]; then
    echo "Error: Version is required for tagging."
    return 1
  fi

  if ! [[ "$version" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "Error: Version format must be 'vX.Y.Z' (e.g., v1.0.0)."
    return 1
  fi

  if git rev-parse "refs/tags/$version" >/dev/null 2>&1; then
    echo "Error: Tag '$version' already exists."
    return 1
  fi

  echo "Creating tag '$version'..."
  git tag -a "$version" -m "Release $version" && git push origin "$version"
  echo "Tag '$version' created successfully."
}


# Cleanup merged branches
cleanup_branches() {
  ensure_git_repo
  echo "Merged branches (excluding main branches):"
  merged_branches=$(git branch --merged | grep -vE "(^\*|master|main|develop|alpha)")

  if [[ -z "$merged_branches" ]]; then
    echo "No merged branches found."
    return 0
  fi

  echo "$merged_branches"
  read -rp "Do you want to delete all merged branches? (y/n): " delete_all

  if [[ "$delete_all" == "y" ]]; then
    echo "$merged_branches" | xargs git branch -d
    echo "Deleted all merged branches."
  else
    echo "$merged_branches" | while read branch; do
      read -rp "Delete branch '$branch'? (y/n): " confirm
      [[ "$confirm" == "y" ]] && git branch -d "$branch"
    done
  fi
}

# Fetch PRs, Non-PR Merges, and Standalone Commits
fetch_prs_and_commits() {
  local start_commit="$1"
  local end_commit="${2:-HEAD}"  # Default to HEAD if not provided
  local output_file="${3:-pr_report_${start_commit}_to_${end_commit}.txt}"

  ensure_git_repo

  if [[ -z "$start_commit" ]]; then
    echo "‚ùå Error: Start commit is required."
    read -rp "Enter the start commit hash: " start_commit
  fi

  local commit_range="${start_commit}..${end_commit}"
  echo "üöÄ Generating PR and commit report for range: $commit_range"
  echo "üìÅ Saving output to: $output_file"

  {
    echo "PRs, Non-PR Merges, and Standalone Commits Report"
    echo ""

    # üîπ PRs (Merged Pull Requests)
    echo "1Ô∏è‚É£ PRs:"
    echo ""
    git log --merges --pretty=format:"%h|%s|%b|%an|%ae|%ad" "$commit_range" | grep "Merge pull request" | while IFS= read -r merge_commit; do
      local merge_hash=$(echo "$merge_commit" | cut -d'|' -f1)
      local pr_details=$(echo "$merge_commit" | cut -d'|' -f2-)
      echo "üîπ Merge Commit: $merge_hash | $pr_details"
      echo "   PR Contains the following commits:"
      git log "${merge_hash}^1..${merge_hash}" --no-merges --pretty=format:"   - %h | %s | %an (%ad)"
      echo ""
    done

    # üîπ Non-PR Merges
    echo "2Ô∏è‚É£ Non-PR Merges:"
    echo ""
    git log --merges --pretty=format:"%h|%s|%b|%an|%ae|%ad" "$commit_range" | grep -v "Merge pull request" | while IFS= read -r merge_commit; do
      local merge_hash=$(echo "$merge_commit" | cut -d'|' -f1)
      local merge_details=$(echo "$merge_commit" | cut -d'|' -f2-)
      echo "üîπ Merge Commit: $merge_hash | $merge_details"
      echo "   Contains the following commits:"
      git log "${merge_hash}^1..${merge_hash}" --no-merges --pretty=format:"   - %h | %s | %an (%ad)"
      echo ""
    done

    # üîπ Standalone Commits
    echo "3Ô∏è‚É£ Standalone Commits:"
    echo ""
    
    # Get all commits
    local all_commits=$(git log --no-merges --pretty=format:"%h" "$commit_range")

    # Get all merge commits (PRs + non-PR merges)
    local merge_commits=$(git log --merges --pretty=format:"%h" "$commit_range" | while IFS= read -r merge_commit; do
      git log "${merge_commit}^1..${merge_commit}" --no-merges --pretty=format:"%h"
    done)

    # Filter out commits that are part of PRs or merges
    local standalone_commits=$(comm -23 <(echo "$all_commits" | sort) <(echo "$merge_commits" | sort))

    for commit in $standalone_commits; do
      git log -n 1 --pretty=format:"üî∏ %h | %s | %an (%ad)" "$commit"
    done

    echo ""
  } | tee "$output_file"

  echo "‚úÖ Report generated in $output_file"
}


# Unified stash operations
stash_operations() {
  ensure_git_repo
  echo "üöÄ Stash Manager:"
  echo "1. Save changes to stash"
  echo "2. List stashes"
  echo "3. Apply a stash"
  echo "4. Pop (apply & delete) a stash"
  echo "5. Drop a stash"
  echo "6. Rename a stash"
  echo "7. Delete all stashes"
  read -rp "Enter your choice: " choice

  case $choice in
    1) 
      local timestamp=$(date +"%Y-%m-%d_%H-%M-%S")
      local branch_name=$(git rev-parse --abbrev-ref HEAD)
      local stash_name="Stash on $branch_name @ $timestamp"
      git stash push -m "$stash_name"
      echo "‚úÖ Changes stashed as: $stash_name"
      ;;
    2) git stash list ;;
    3) 
      git stash list
      read -rp "Enter stash number to apply: " stash_number
      git stash apply "stash@{$stash_number}"
      ;;
    4) 
      git stash list
      read -rp "Enter stash number to pop: " stash_number
      git stash pop "stash@{$stash_number}"
      ;;
    5) 
      git stash list
      read -rp "Enter stash number to drop: " stash_number
      git stash drop "stash@{$stash_number}"
      ;;
    6) 
      git stash list
      read -rp "Enter stash number to rename: " stash_number
      read -rp "Enter new stash name: " new_name
      git stash store -m "$new_name" "stash@{$stash_number}"
      ;;
    7) 
      read -rp "Are you sure you want to delete all stashes? (y/n): " confirm
      [[ "$confirm" == "y" ]] && git stash clear && echo "‚úÖ All stashes deleted."
      ;;
    *) echo "‚ùå Invalid choice." ;;
  esac
}


# Compare branches
compare_branches() {
  read -rp "Enter the first branch to compare (default: current branch): " branch1
  read -rp "Enter the second branch to compare (default: main): " branch2

  branch1=${branch1:-$(git rev-parse --abbrev-ref HEAD)}
  branch2=${branch2:-$(detect_main_branch)}

  if ! git show-ref --verify --quiet "refs/heads/$branch1" || ! git show-ref --verify --quiet "refs/heads/$branch2"; then
    echo "Error: One or both branches do not exist."
    return 1
  fi

  echo "Commits unique to each branch:"
  git log --oneline "$branch1".."$branch2"
  echo "Files changed between branches:"
  git diff --name-only "$branch1".."$branch2"
}


# Git configuration editor
edit_git_config() {
  echo "Current Git Configuration:"
  git config --list
  echo "Options:"
  echo "1. Add/Edit a key"
  echo "2. Remove a key"
  read -rp "Enter your choice: " choice

  case $choice in
  1)
    read -rp "Enter the key you want to add/edit: " key
    if [[ -n "$key" ]]; then
      read -rp "Enter the new value for $key: " value
      git config --global "$key" "$value"
      echo "Updated $key to $value globally."
    else
      echo "No changes made."
    fi
    ;;
  2)
    read -rp "Enter the key you want to remove: " key
    if [[ -n "$key" ]]; then
      git config --global --unset "$key"
      echo "Removed key: $key"
    else
      echo "No changes made."
    fi
    ;;
  *)
    echo "Invalid choice."
    ;;
  esac
}

summarize_repo() {
  ensure_git_repo
  echo "Repository Summary:"
  echo "===================="
  echo "Current Branch: $(git rev-parse --abbrev-ref HEAD)"
  echo "Latest Commit: $(git log -1 --pretty=format:'%h - %s (%an, %ad)' --date=short)"
  echo "Total Commits: $(git rev-list --count HEAD)"
  echo "Number of Tags: $(git tag | wc -l)"
  echo "Number of Stashes: $(git stash list | wc -l)"
  echo "Repository Size: $(du -sh .git | awk '{print $1}')"
  echo "Remotes:"
  git remote -v | awk '{print "  - " $1 " -> " $2}' | sort | uniq
  echo "Branches:"
  git branch -a
  echo ""
  echo "Contributors:"
  git shortlog -sne | awk '{printf "%s %s (%s commits)\n", $2, $3, $1}'
  echo ""
}

track_staged_changes() {
  local diff_file="${1:-diffs.txt}"

  ensure_git_repo
  echo "Choose an action:"
  echo "1. Save staged changes to a file"
  echo "2. View staged changes inline"
  read -rp "Enter your choice: " choice

  case $choice in
  1)
    if [[ -f "$diff_file" ]]; then
      read -rp "File $diff_file already exists. Overwrite? (y/n): " overwrite
      if [[ "$overwrite" != "y" ]]; then
        echo "Aborting save operation."
        return
      fi
    fi
    git --no-pager diff --cached >"$diff_file"
    if [[ -s "$diff_file" ]]; then
      echo "Staged changes saved to $diff_file"
    else
      echo "No changes are currently staged."
    fi
    ;;
  2)
    git --no-pager diff --cached
    ;;
  *)
    echo "Invalid choice."
    ;;
  esac
}

cherry_pick_commit() {
  ensure_git_repo
  echo "Recent Commit History:"
  git log --oneline | nl -w2 -s". " | tee /tmp/git_log.txt

  read -rp "Enter the numbers of the commits to cherry-pick (comma-separated): " commit_numbers
  commit_hashes=$(echo "$commit_numbers" | tr ',' '\n' | while read -r num; do
    sed -n "${num}p" /tmp/git_log.txt | awk '{print $2}'
  done)

  if [[ -z "$commit_hashes" ]]; then
    echo "No valid commits selected. Exiting."
    return
  fi

  for commit in $commit_hashes; do
    git cherry-pick "$commit" || {
      echo "Conflict detected during cherry-pick of $commit."
      read -rp "Do you want to resolve conflicts manually or abort? (resolve/abort): " action
      if [[ "$action" == "abort" ]]; then
        git cherry-pick --abort
        echo "Cherry-pick aborted."
        return
      fi
    }
    echo "Cherry-picked commit: $commit"
  done
}

clean_untracked() {
  ensure_git_repo

  echo "Choose an action:"
  echo "1. Preview untracked files and directories (dry-run)"
  echo "2. Clean untracked files and directories"
  read -rp "Enter your choice: " choice

  case $choice in
  1)
    echo "Preview of untracked files and directories:"
    git clean -fdn
    ;;
  2)
    echo "This action will permanently delete untracked files and directories."
    read -rp "Are you sure you want to proceed? (y/n): " confirm
    if [[ "$confirm" == "y" ]]; then
      git clean -fd
      echo "Untracked files and directories cleaned."
    else
      echo "Operation canceled."
    fi
    ;;
  *)
    echo "Invalid choice."
    ;;
  esac
}

show_large_files() {
  ensure_git_repo

  read -rp "How many large files do you want to display? (default 10): " count
  count=${count:-10}

  echo "Choose an action:"
  echo "1. Display results inline"
  echo "2. Save results to a file"
  read -rp "Enter your choice: " choice

  case $choice in
  1)
    echo "Top $count largest files in the repository:"
    git rev-list --objects --all | git cat-file --batch-check='%(objectname) %(objecttype) %(rest)' |
      sed -n 's/^.*blob //p' | sort -k2 -n -r | head -"$count" | awk '{print $2 " (" $1 " bytes)"}'
    ;;
  2)
    read -rp "Enter the output file name (default: large_files.txt): " output_file
    output_file=${output_file:-large_files.txt}
    git rev-list --objects --all | git cat-file --batch-check='%(objectname) %(objecttype) %(rest)' |
      sed -n 's/^.*blob //p' | sort -k2 -n -r | head -"$count" | awk '{print $2 " (" $1 " bytes)"}' >"$output_file"
    echo "Results saved to $output_file"
    ;;
  *)
    echo "Invalid choice."
    ;;
  esac
}

fetch_and_prune() {
  ensure_git_repo
  echo "Fetching remote branches and pruning stale references..."
  git fetch --prune
  echo "Done."
}
file_log() {
  ensure_git_repo
  read -rp "Enter the file path to view its history: " file_path

  if [[ ! -f "$file_path" ]]; then
    echo "‚ùå Error: File '$file_path' does not exist."
    return 1
  fi

  echo "üìå Choose an action:"
  echo "1. View commit history of the file"
  echo "2. View diffs for commits affecting the file"
  read -rp "Enter your choice: " choice

  case $choice in
    1) 
      echo "üìå Commit history for $file_path:"
      git log --follow --pretty=format:"%h - %s (%an, %ad)" --date=short -- "$file_path"
      ;;
    2) 
      echo "üìå Diffs for commits affecting $file_path:"
      git log --follow -p -- "$file_path"
      ;;
    *) echo "‚ùå Invalid choice." ;;
  esac
}

revert_commit() {
  ensure_git_repo
  echo "üìå Recent Commit History:"
  git log --oneline | nl -w2 -s". " | tee /tmp/git_log.txt

  read -rp "Enter the numbers of the commits to revert (comma-separated): " commit_numbers

  commit_hashes=$(echo "$commit_numbers" | tr ',' '\n' | while read -r num; do
    sed -n "${num}p" /tmp/git_log.txt | awk '{print $2}'
  done)

  if [[ -z "$commit_hashes" ]]; then
    echo "‚ùå No valid commits selected."
    return 1
  fi

  echo "üìå Choose an action:"
  echo "1. Create revert commits for each selected commit"
  echo "2. Revert and amend the last commit"
  read -rp "Enter your choice: " choice

  case $choice in
    1) 
      for commit in $commit_hashes; do
        git revert "$commit" || {
          echo "‚ö†Ô∏è Conflict detected while reverting $commit. Resolve manually."
          exit 1
        }
        echo "‚úÖ Reverted commit: $commit"
      done
      ;;
    2) 
      for commit in $commit_hashes; do
        git revert --no-commit "$commit"
      done
      git commit --amend -m "Amended revert: $(git log -1 --pretty=%B)"
      echo "‚úÖ Reverted commits and amended the last commit."
      ;;
    *) echo "‚ùå Invalid choice." ;;
  esac
}


reset_branch_to_remote() {
  ensure_git_repo
  local branch
  branch=$(git rev-parse --abbrev-ref HEAD)

  if ! git ls-remote --exit-code origin "$branch" &>/dev/null; then
    echo "‚ùå Error: Remote branch '$branch' does not exist."
    return 1
  fi

  echo "üö® WARNING: This will reset '$branch' to match 'origin/$branch'."
  echo "1. Soft reset (keep local changes)"
  echo "2. Hard reset (discard all local changes)"
  echo "3. Dry-run (preview only)"
  read -rp "Enter your choice: " reset_type

  case $reset_type in
    1) git fetch origin && git reset --soft "origin/$branch" && echo "‚úÖ Soft reset completed." ;;
    2) 
      read -rp "Are you sure? This will discard ALL local changes. (y/n): " confirm
      [[ "$confirm" == "y" ]] && git fetch origin && git reset --hard "origin/$branch" && echo "‚úÖ Hard reset completed."
      ;;
    3) git fetch origin && git diff --stat "origin/$branch" ;;
    *) echo "‚ùå Invalid choice." ;;
  esac
}


prune_remote_branches() {
  ensure_git_repo
  echo "üöÄ Fetching and pruning stale remote branches..."
  git fetch --prune

  echo "üóëÔ∏è Checking for deleted remote branches..."
  local deleted_branches
  deleted_branches=$(git branch -vv | awk '/: gone]/{print $1}')

  if [[ -z "$deleted_branches" ]]; then
    echo "‚úÖ No local branches need pruning."
    return 0
  fi

  echo "$deleted_branches"
  read -rp "Do you want to delete all these branches? (y/n): " delete_all

  if [[ "$delete_all" == "y" ]]; then
    echo "$deleted_branches" | xargs git branch -D
    echo "‚úÖ Deleted all local branches tracking removed remote branches."
  else
    echo "$deleted_branches" | while read branch; do
      read -rp "Delete branch '$branch'? (y/n): " confirm
      [[ "$confirm" == "y" ]] && git branch -D "$branch"
    done
  fi
}


interactive_commit() {
  ensure_git_repo

  # Check if there are any changes to commit
  if [[ -z $(git status --porcelain) ]]; then
    echo "‚úÖ No changes to commit."
    return 0
  fi

  echo "üìå Select files to stage (use numbers):"
  git status -s | nl -w2 -s". " | tee /tmp/git_status.txt

  read -rp "Enter file numbers to stage (comma-separated, 'a' for all): " file_numbers

  if [[ "$file_numbers" == "a" ]]; then
    git add .
  else
    selected_files=$(echo "$file_numbers" | tr ',' '\n' | while read -r num; do
      sed -n "${num}p" /tmp/git_status.txt | awk '{print $2}'
    done)
    git add $selected_files
  fi

  echo "üìå Staged files:"
  git diff --cached --name-only

  read -rp "Enter your commit message: " commit_message
  git commit -m "$commit_message"
  echo "‚úÖ Committed changes with message: $commit_message"
}


show_status() {
  ensure_git_repo
  echo "üöÄ Repository Status:"
  git status -sb --untracked-files=all
  echo ""
  echo "üìå Branch Tracking Info:"
  git rev-list --left-right --count @{upstream}...HEAD 2>/dev/null || echo "No upstream branch set."
  echo ""
  echo "üåç Remote Status:"
  git remote -v | awk '{print "  - " $1 " -> " $2}' | sort | uniq
}


generate_git_summary() {
    # Determine the git log range (if provided)
    log_range=""
    if [[ -n "$1" && "$1" != "include-all" ]]; then
        log_range="$1..HEAD"
    fi

    # Check if we include all text-based files
    include_all=false
    if [[ "$1" == "include-all" || "$2" == "include-all" ]]; then
        include_all=true
    fi

    # Define the git log command
    git_log_cmd="git --no-pager log --no-merges $log_range --pretty='>>%h|%ce|%ct|%s|%aN' --shortstat"

    # Temporary files for storing commit stats and blame results
    temp_file=$(mktemp)
    blame_file=$(mktemp)

    # Process commits one by one to avoid storing all logs in memory
    eval "$git_log_cmd" | while read -r line; do
        if [[ $line == ">>"* ]]; then
            # Extract author email and name
            email=$(echo "$line" | awk -F'|' '{print $2}')
            name=$(echo "$line" | awk -F'|' '{print $5}')
            echo "$email|$name|commit" >> "$temp_file"

        elif [[ $line == *"files changed"* ]]; then
            # Extract file changes, insertions, and deletions using awk
            files=$(echo "$line" | awk '{for (i=1; i<=NF; i++) if ($i ~ /^[0-9]+$/) { if ($(i+1) ~ /^files?/) print $i }}' | head -n1)
            ins=$(echo "$line" | awk '{for (i=1; i<=NF; i++) if ($i ~ /^[0-9]+$/) { if ($(i+1) ~ /^insertion/) print $i }}' | head -n1)
            del=$(echo "$line" | awk '{for (i=1; i<=NF; i++) if ($i ~ /^[0-9]+$/) { if ($(i+1) ~ /^deletion/) print $i }}' | head -n1)

            # Default to 0 if values are empty
            files=${files:-0}
            ins=${ins:-0}
            del=${del:-0}

            # Write data to temp file
            echo "$email|$name|$files|$ins|$del" >> "$temp_file"
        fi
    done

    # Detect Code Files (Includes Extensionless Files if Flag is Set)
    git ls-files | while read -r file; do
        # Get MIME type (file type detection)
        filetype=$(file --mime-type -b "$file")

        # Allow text-based code files based on user flag
        if [[ "$include_all" == true && "$filetype" =~ ^text/ ]]; then
            echo "$file"
        elif [[ "$file" =~ \.(sh|py|js|ts|go|java|c|cpp|php|rb|html|css|scss|sql|xml|json|yaml|yml|md|toml|ini|cfg|conf|properties|gradle|makefile|Dockerfile|env|gitignore)$ ]]; then
            echo "$file"
        fi
    done | xargs -P$(nproc) -I{} git blame --line-porcelain "{}" 2>/dev/null | grep -E "author-mail" >> "$blame_file"

    # Print Markdown Table Header
    echo "| Author Name | Author Email | Commits | Files Changed | Insertions | Deletions | Surviving Code % |"
    echo "|------------|--------------|---------|--------------|-----------|----------|----------------|"

    # Memory-efficient aggregation using awk
    awk -F'|' -v blame_file="$blame_file" '
    BEGIN {
        total_surviving = 0
        total_insertions = 0
        while ((getline < blame_file) > 0) {
            split($0, arr, " ")
            author_email = arr[2]
            gsub(/[<>]/, "", author_email)
            surviving_lines[author_email]++
            total_surviving++
        }
        close(blame_file)
    }
    {
        if ($3 == "commit") {
            commits[$1]++
            authors[$1] = $2
        } else {
            files_changed[$1] += $3
            insertions[$1] += $4
            deletions[$1] += $5
            total_insertions += $4
        }
    }
    END {
        for (email in commits) {
            total_ins = insertions[email] + 0
            survival = (total_surviving > 0 && total_ins > 0) ? int((surviving_lines[email] / total_surviving) * 100) : 0
            print "| " authors[email] " | " email " | " commits[email] " | " files_changed[email] " | " insertions[email] " | " deletions[email] " | " survival "% |"
        }
    }' "$temp_file"

    # Clean up temp files
    rm "$temp_file" "$blame_file"
}
generate_commit_report() {
  if [ "$#" -eq 1 ]; then
    commit_range=$1
    git_log_command="git --no-pager log --no-merges $commit_range --pretty=\"%h|%ce|%ct|%s|%b|%aN\" -e"
  elif [ "$#" -eq 2 ]; then
    start_date=$1
    end_date=$2
    if ! [[ "$start_date" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] || ! [[ "$end_date" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
      echo "Error: Dates must be in YYYY-MM-DD format."
      return 1
    fi
    git_log_command="git --no-pager shortlog --no-merges --after=\"$start_date 00:00\" --before=\"$end_date 23:59\" --pretty=\">>%h|%ce|%ct|%s|%b|%aN\" -e"
  else
    echo "Usage: $0 <start_date> <end_date> | <commit_range>"
    return 1
  fi

  git_shortlog=$(eval $git_log_command)

  if [ -z "$git_shortlog" ]; then
    echo "No commits found."
    return 1
  fi

  echo "$git_shortlog" | awk '
  BEGIN { print "# Commit Report\n" }
  /^[^ ]/ {
    if (author != "") {
      print "- Number of Commits: " count
      print ""
      print "| Commit Id | Type | Subject & Body | Date & Time |"
      print "| --- | --- | --- | --- |"
      print details "\n"
    }
    author = $0
    match(author, /^(.*) <(.*)>/, m)
    author_name = m[1]
    author_email = m[2]

    print "### " author_name
    print "- Email: " author_email

    count = 0
    details = ""
    next
  }
  /^      >>|^[^ ]/ {
    line = substr($0, 8)
    split(line, parts, "|")
    commit_id = parts[1]
    timestamp = strftime("%Y-%m-%d %H:%M:%S", parts[3])
    subject = parts[4]
    body = parts[5]

    clean_subject = subject
    gsub(/^:[^:]+: /, "", clean_subject)

    match(clean_subject, /^(feature|feat|fix|bugfix|hotfix|chore|docs|style|refactor|perf|test|ci|build|revert|BREAKING CHANGE)(\([^)]+\))?:/, type_match)
    type = (type_match[1] != "") ? type_match[1] : "misc"

    gsub(/\|/, "\\|", subject)
    gsub(/\|/, "\\|", body)
    gsub(/\r/, "", body)
    gsub(/ +- /, "\n- ", body)
    gsub(/ +-/, "\n- ", body)
    gsub(/\n+/, "<br>", body)

    if (length(body) > 0) {
      subject_body = subject "<br><br>" body
    } else {
      subject_body = subject
    }

    gsub(/\|/, "\\|", subject_body)

    details = details "| " commit_id " | " type " | " subject_body " | " timestamp " |\n"
    count++
  }
  END {
    if (author != "") {
      print "- Number of Commits: " count
      print ""
      print "| Commit Id | Type | Subject & Body | Date & Time |"
      print "| --- | --- | --- | --- |"
      print details "\n"
    }
  }'
}
self_update() {
  require_sudo
  local script_url="https://raw.githubusercontent.com/infocyph/Toolset/main/Git/gitx"
  local temp_file="/tmp/gitx_latest"
  local local_file="/usr/local/bin/gitx"

  echo -e "${YELLOW}Checking for updates to gitx...${NC}"

  if ! curl -fsSL "$script_url" -o "$temp_file"; then
    echo -e "${RED}Failed to download the latest gitx script from GitHub.${NC}"
    return 1
  fi

  # Optional: Compare local vs remote with sha256sum if you want to check for changes
  local remote_hash local_hash
  remote_hash="$(sha256sum "$temp_file" | awk '{print $1}')"
  local_hash="$(sha256sum "$local_file" 2>/dev/null | awk '{print $1}')"
  if [[ "$remote_hash" == "$local_hash" ]]; then
    echo -e "${GREEN}gitx is already up-to-date.${NC}"
    rm -f "$temp_file"
    return 0
  fi

  if [[ -f "$local_file" ]]; then
    mv "$local_file" "${local_file}.bak-$(date +'%Y%m%d%H%M%S')" 2>/dev/null || true
  fi

  if ! mv "$temp_file" "$local_file"; then
    echo -e "${RED}Failed to overwrite $local_file with the new gitx script.${NC}"
    return 1
  fi

  chmod +x "$local_file"

  echo -e "${GREEN}gitx has been updated successfully to the latest version.${NC}"
}
trap "echo -e '${RED}Process interrupted. Exiting.${NC}'; exit 6" SIGINT SIGTERM
# Main script logic
case $1 in
status) show_status ;;
commit) interactive_commit ;;
revert) revert_commit ;;
log-file) file_log ;;
fetch) fetch_and_prune ;;
large-files) show_large_files ;;
clean) clean_untracked ;;
cherry-pick) cherry_pick_commit ;;
reset-branch) reset_branch_to_remote ;;
prune) prune_remote_branches ;;
report) fetch_prs_and_commits "$2" "$3" "$4" ;;
diff) track_staged_changes "$2" ;;
stash) stash_operations ;;
create) create_branch "$2" "$3" ;;
sync) sync_branches ;;
merge) merge_branch "$2" "$3" ;;
tag) tag_release "$2" ;;
cleanup) cleanup_branches ;;
compare) compare_branches ;;
config) edit_git_config ;;
summarize) summarize_repo ;;
commit-report) generate_commit_report "$2" "$3";;
unstage) unstage_all ;;
amend) amend_commit_message ;;
add-remote) add_remote ;;
push-remote) push_to_remote ;;
pull-remote) pull_from_remote ;;
stage-deleted) stage_deleted_files ;;
stage-deleted-dir) stage_deleted_in_directory ;;
initial-commit) get_initial_commit ;;
latest-tag) get_latest_tag ;;
changelog) generate_changelog ;;
count-changes) count_changes_between_commits ;;
list-changes) list_changed_files_between_branches ;;
set-lf) set_line_endings_to_lf ;;
self-update) self_update ;;
summary) generate_git_summary "$2" "$3" ;;
*) usage ;;
esac
